import React, { useState, useEffect, useCallback, useRef, useMemo } from "react";
import {
  Box,
  Button,
  Typography,
  Paper,
  Tabs,
  Tab,
  TextField,
  InputAdornment,
  IconButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tooltip,
  CircularProgress,
  Alert,
  Container,
  Grid,
  SelectChangeEvent,
  Chip,
  Avatar,
  // Aggiungo Badge per mostrare quando ci sono modifiche non sincronizzate
  Badge,
  Collapse,
  Fab,
  Zoom,
  Menu,
  ListItemIcon,
  ListItemText,
  Divider,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import CloseIcon from "@mui/icons-material/Close";
import ViewListIcon from "@mui/icons-material/ViewList";
import ViewModuleIcon from "@mui/icons-material/ViewModule";
import UnfoldMoreIcon from "@mui/icons-material/UnfoldMore";
import UnfoldLessIcon from "@mui/icons-material/UnfoldLess";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import PictureAsPdfIcon from "@mui/icons-material/PictureAsPdf";
import SortIcon from "@mui/icons-material/Sort";
import SortByAlphaIcon from "@mui/icons-material/SortByAlpha";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import FormatListBulletedIcon from "@mui/icons-material/FormatListBulleted";
import FolderOpenIcon from "@mui/icons-material/FolderOpen";
import FolderIcon from "@mui/icons-material/Folder";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import AddIcon from "@mui/icons-material/Add";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  getDoc,
  updateDoc,
  addDoc,
  deleteDoc,
  onSnapshot,
  serverTimestamp,
  QueryDocumentSnapshot,
  DocumentData,
  deleteField,
  writeBatch,
  Timestamp,
} from "firebase/firestore";
import { db } from "../../../configurazione/firebase";
import { useAuth } from "../../../componenti/autenticazione/AuthContext";
import { Farm } from "../../../tipi/giocatore";
import { Incarico, IncaricoCitta } from "../../../tipi/incarico";
import { Assegnazione } from "../../../tipi/assegnazione";
import { Cesto, IncaricoInCesto } from "../../../tipi/cesto";
import { Edificio } from "../../../tipi/edificio";
import { Derby } from "../../../tipi/derby";
import Layout from "../../../componenti/layout/Layout";
import { useTranslation } from "react-i18next";
import ListaIncarichi from "./componenti/ListaIncarichi";
import ListaIncarichiCitta from "./componenti/ListaIncarichiCitta";
import ListaCesti from "./componenti/ListaCesti";
import ProgressoBar from "./componenti/ProgressoBar";
// Aggiungo icona per il pulsante di sincronizzazione
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import CloudDoneIcon from "@mui/icons-material/CloudDone";
import FilterListIcon from "@mui/icons-material/FilterList";
import CircleIcon from "@mui/icons-material/Circle";

// Estensione dell'interfaccia Assegnazione per aggiungere la proprietà quantita
interface AssegnazioneEstesa extends Assegnazione {
  quantita?: number;
}

// Definizione dell'interfaccia TabPanel
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

// Componente TabPanel
function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}
      style={{ width: "100%", maxWidth: "100%", overflowX: "hidden", boxSizing: "border-box" }}
    >
      {value === index && (
        <Box sx={{ 
          pt: 2, 
          px: { xs: 0, sm: 0, md: 0 },
          width: "100%", 
          maxWidth: "100%", 
          display: "flex", 
          flexDirection: "column", 
          alignItems: "center", 
          overflow: "hidden",
          boxSizing: "border-box"
        }}>
          {children}
        </Box>
      )}
    </div>
  );
}

// Importo il servizio di gestione cache
import { caricaDatiConCache, caricaAssegnazioniConCache, creaDocumentoMetadati } from "../../../servizi/gestioneCache";

// Importo il componente AggiornaDatiButton
import AggiornaDatiButton from "../../../componenti/comune/AggiornaDatiButton";

export default function MieiIncarichiNuovo() {
  const { currentUser } = useAuth();
  const { t } = useTranslation();

  // Stati per i dati
  const [farms, setFarms] = useState<Farm[]>([]);
  const [farmSelezionata, setFarmSelezionata] = useState<string>(() => {
    try {
      return localStorage.getItem("farmSelezionata") || "";
    } catch {
      return "";
    }
  });
  const [incarichi, setIncarichi] = useState<Incarico[]>([]);
  const [incarichiCitta, setIncarichiCitta] = useState<IncaricoCitta[]>([]);
  const [assegnazioni, setAssegnazioni] = useState<AssegnazioneEstesa[]>([]);
  const [cesti, setCesti] = useState<Cesto[]>([]);
  const [progressi, setProgressi] = useState<Map<string, number>>(new Map());
  const [progressiDocs, setProgressiDocs] = useState<Map<string, string>>(new Map());
  const [edifici, setEdifici] = useState<Edificio[]>([]);
  const [derby, setDerby] = useState<Derby[]>([]);
  const [derbySelezionato, setDerbySelezionato] = useState<Derby | null>(() => {
    try {
      const savedDerbyId = localStorage.getItem("derbySelezionato");
      if (savedDerbyId) {
        // Il derby completo verrà impostato dopo il caricamento dei derby
        return { id: savedDerbyId } as Derby;
      }
      return null;
    } catch {
      return null;
    }
  });
  const [giocatori, setGiocatori] = useState<{ id: string; nome: string; pin: number; ruolo: string; farms: Farm[] }[]>([]);
  const [giocatoreSelezionato, setGiocatoreSelezionato] = useState<string | null>(() => {
    try {
      return localStorage.getItem("giocatoreSelezionato");
    } catch {
      return null;
    }
  });
  
  // Stati per la UI
  const [loading, setLoading] = useState(true);
  const [dataLoaded, setDataLoaded] = useState(false); // Nuovo stato per tenere traccia del caricamento dei dati
  const [error, setError] = useState<string>("");
  const [tabValue, setTabValue] = useState(() => {
    try {
      return parseInt(localStorage.getItem("tabAttiva") || "0");
    } catch {
      return 0;
    }
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [searchExpanded, setSearchExpanded] = useState(false);
  const [derbySelectExpanded, setDerbySelectExpanded] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);
  
  // Stati per la visualizzazione e l'ordinamento
  const [visualizzazioneGlobale, setVisualizzazioneGlobale] = useState(() => {
    try {
      const savedVisualization = localStorage.getItem("visualizzazioneGlobale");
      // Se il valore esiste in localStorage, usa quello
      if (savedVisualization !== null) {
        return savedVisualization === "true";
      }
      // Altrimenti imposta true come valore di default (vista lista completa)
      return true;
    } catch {
      return true; // Default: visualizzazione lista completa
    }
  });
  
  const [ordinamentoLivello, setOrdinamentoLivello] = useState(() => {
    try {
      return localStorage.getItem("ordinamentoLivello") === "true";
    } catch {
      return true; // Default: ordina per livello
    }
  });
  
  const [ordinamentoAlfabetico, setOrdinamentoAlfabetico] = useState(() => {
    try {
      return localStorage.getItem("ordinamentoAlfabetico") === "true";
    } catch {
      return false;
    }
  });
  
  const [ordinamentoCompletamento, setOrdinamentoCompletamento] = useState(() => {
    try {
      return localStorage.getItem("ordinamentoCompletamento") === "true";
    } catch {
      return false;
    }
  });
  
  const [ordinamentoInverso, setOrdinamentoInverso] = useState(() => {
    try {
      return localStorage.getItem("ordinamentoInverso") === "true";
    } catch {
      return false;
    }
  });
  
  // Stati per l'espansione degli edifici
  const [expandedEdifici, setExpandedEdifici] = useState<string[]>(() => {
    try {
      const saved = localStorage.getItem("expandedEdifici");
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });
  
  const [mostraSoloAssegnati, setMostraSoloAssegnati] = useState<boolean>(() => {
    try {
      const savedValue = localStorage.getItem("miei-incarichi-mostra-assegnati");
      return savedValue !== null ? JSON.parse(savedValue) : true;
    } catch {
      return true;
    }
  });
  
  // Stati per l'evidenziazione temporanea
  const [elementoEvidenziato, setElementoEvidenziato] = useState<{
    tipo: 'incarico' | 'incaricoCitta' | 'cesto';
    id: string;
  } | null>(null);

  // Stati per tenere traccia degli incarichi espansi
  const [expandedIncarichi, setExpandedIncarichi] = useState<string[]>(() => {
    try {
      const saved = localStorage.getItem("expandedIncarichi");
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  });

  // Nuovi stati per la gestione dei progressi locali
  const [progressiLocali, setProgressiLocali] = useState<Map<string, number>>(new Map());
  const [modificheNonSincronizzate, setModificheNonSincronizzate] = useState<boolean>(false);
  const [sincronizzazioneInCorso, setSincronizzazioneInCorso] = useState<boolean>(false);
  
  // Aggiungiamo un nuovo stato per tenere traccia delle modifiche non sincronizzate
  const [progressiModificati, setProgressiModificati] = useState<Set<string>>(new Set());
  
  // Stato per i messaggi di successo
  const [success, setSuccess] = useState<string | null>(null);
  
  // Ottieni il livello della farm selezionata
  const getLivelloFarmSelezionata = (): number => {
    if (!farmSelezionata || !farms || farms.length === 0) return 0;
    const farmIndex = parseInt(farmSelezionata);
    if (isNaN(farmIndex) || farmIndex < 0 || farmIndex >= farms.length) return 0;
    return farms[farmIndex].livello || 0;
  };

  // Funzione per aggiornare il livello della farm selezionata
  const handleUpdateFarmLevel = async () => {
    try {
      // Verifica che ci sia una farm selezionata
      if (!farmSelezionata || farmSelezionata === "") {
        setError("Seleziona una farm prima di aggiornare il livello.");
        return;
      }

      // Ottieni l'indice della farm
      const farmIndex = parseInt(farmSelezionata);
      if (isNaN(farmIndex) || farmIndex < 0 || farmIndex >= farms.length) {
        setError("Farm non valida.");
        return;
      }

      // Ottieni la farm selezionata
      const farm = farms[farmIndex];
      if (!farm) {
        setError("Farm non trovata.");
        return;
      }

      // Controlla che il livello non superi 999
      if (farm.livello >= 999) {
        setError("Il livello massimo è 999");
        return;
      }

      // Incrementa il livello della farm
      const nuovoLivello = (farm.livello || 0) + 1;
      
      // Aggiorna la farm
      const farmsAggiornate = [...farms];
      farmsAggiornate[farmIndex] = {
        ...farmsAggiornate[farmIndex],
        livello: nuovoLivello
      };

      // Aggiorna il documento utente nel database
      let userId = "";
      
      // Se è un admin o coordinatore e ha selezionato un giocatore, aggiorna quel giocatore
      if ((currentUser?.ruolo === "admin" || currentUser?.ruolo === "coordinatore") && giocatoreSelezionato) {
        userId = giocatoreSelezionato;
      } 
      // Altrimenti aggiorna l'utente corrente
      else if (currentUser) {
        userId = currentUser.id;
      } else {
        setError("Impossibile aggiornare il livello: utente non trovato.");
        return;
      }

      // Aggiorna il documento nel DB
      const userRef = doc(db, "utenti", userId);
      await updateDoc(userRef, {
        farms: farmsAggiornate
      });

      // Aggiorna lo stato locale
      setFarms(farmsAggiornate);
      
      // Mostra un messaggio di successo
      setSuccess("Livello della farm aggiornato con successo!");
    } catch (error) {
      console.error("Errore nell'aggiornamento del livello:", error);
      setError("Errore nell'aggiornamento del livello della farm.");
    }
  };
  
  // Effetto per salvare la posizione di scroll
  useEffect(() => {
    const handleScroll = () => {
      localStorage.setItem("scrollPosition", String(window.scrollY));
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);
  
  // Effetto per ripristinare la posizione di scroll dopo che i dati sono stati caricati
  useEffect(() => {
    if (dataLoaded && !loading) {
      console.log("Ripristino posizione di scroll");
      const savedScrollPosition = localStorage.getItem("scrollPosition");
      if (savedScrollPosition) {
        const scrollToPosition = (position: number) => {
          console.log("Scrolling to position:", position);
          window.scrollTo({
            top: position,
            behavior: 'auto'
          });
        };

        // Primo tentativo dopo 800ms
        setTimeout(() => {
          scrollToPosition(parseInt(savedScrollPosition));
        }, 800);
        
        // Secondo tentativo dopo 1500ms, nel caso in cui il primo non funzioni correttamente
        setTimeout(() => {
          scrollToPosition(parseInt(savedScrollPosition));
        }, 1500);
      }
    }
  }, [dataLoaded, loading]);
  
  useEffect(() => {
    localStorage.setItem("visualizzazioneGlobale", String(visualizzazioneGlobale));
  }, [visualizzazioneGlobale]);
  
  useEffect(() => {
    localStorage.setItem("ordinamentoLivello", String(ordinamentoLivello));
  }, [ordinamentoLivello]);
  
  useEffect(() => {
    localStorage.setItem("ordinamentoAlfabetico", String(ordinamentoAlfabetico));
  }, [ordinamentoAlfabetico]);
  
  useEffect(() => {
    localStorage.setItem("ordinamentoCompletamento", String(ordinamentoCompletamento));
  }, [ordinamentoCompletamento]);
  
  useEffect(() => {
    localStorage.setItem("ordinamentoInverso", String(ordinamentoInverso));
  }, [ordinamentoInverso]);
  
  useEffect(() => {
    localStorage.setItem("expandedEdifici", JSON.stringify(expandedEdifici));
  }, [expandedEdifici]);
  
  useEffect(() => {
    localStorage.setItem("miei-incarichi-mostra-assegnati", JSON.stringify(mostraSoloAssegnati));
  }, [mostraSoloAssegnati]);

  useEffect(() => {
    if (farmSelezionata) {
      localStorage.setItem("farmSelezionata", farmSelezionata);
    }
  }, [farmSelezionata]);

  useEffect(() => {
    if (giocatoreSelezionato) {
      localStorage.setItem("giocatoreSelezionato", giocatoreSelezionato);
    }
  }, [giocatoreSelezionato]);

  useEffect(() => {
    localStorage.setItem("tabAttiva", String(tabValue));
  }, [tabValue]);

  useEffect(() => {
    if (derbySelezionato?.id) {
      localStorage.setItem("derbySelezionato", derbySelezionato.id);
    }
  }, [derbySelezionato]);

  useEffect(() => {
    localStorage.setItem("expandedIncarichi", JSON.stringify(expandedIncarichi));
  }, [expandedIncarichi]);

  // Effetto per verificare che la farm selezionata sia valida quando le farm cambiano
  useEffect(() => {
    // Se non ci sono farm, non fare nulla
    if (farms.length === 0) return;
    
    // Se la farm selezionata non è valida, seleziona la prima farm
    const farmIndex = parseInt(farmSelezionata);
    if (isNaN(farmIndex) || farmIndex < 0 || farmIndex >= farms.length) {
      console.log("Farm selezionata non valida, seleziono la prima farm");
      setFarmSelezionata("0");
    }
  }, [farms, farmSelezionata]);

  // Riferimenti alle funzioni per evitare dipendenze circolari
  const caricaAssegnazioniRef = useRef<(forceReload?: boolean) => void>(() => {});
  const caricaProgressiRef = useRef<(assegnazioniData?: AssegnazioneEstesa[]) => void>(() => {});
  const verificaModificheNonSincronizzateRef = useRef<(nuoviProgressi: Map<string, number>) => void>(() => {});
  const caricaProgressiLocaliRef = useRef<() => void>(() => {});

  // Funzione per caricare i progressi locali da localStorage
  const caricaProgressiLocali = useCallback(() => {
    try {
      // Se farmSelezionata è impostato, carica i progressi specifici per quella farm
      if (farmSelezionata) {
        console.log(`caricaProgressiLocali - Caricamento progressi per farm ${farmSelezionata}`);
        
        // Carica i progressi locali con una chiave che include l'ID della farm
        const chiaveStorage = `progressiLocali_${farmSelezionata}`;
        const progressiSalvati = localStorage.getItem(chiaveStorage);
        
        if (progressiSalvati) {
          const progressiObj = JSON.parse(progressiSalvati);
          
          // Converti l'oggetto in una Map
          const nuoviProgressiLocali = new Map<string, number>();
          Object.entries(progressiObj).forEach(([key, value]) => {
            nuoviProgressiLocali.set(key, value as number);
            console.log(`caricaProgressiLocali - Caricato progresso: ${key} = ${value}`);
          });
          
          setProgressiLocali(nuoviProgressiLocali);
          console.log("Progressi locali caricati da localStorage", nuoviProgressiLocali.size, "elementi");
          
          // Stampa tutti i progressi locali caricati
          nuoviProgressiLocali.forEach((value, key) => {
            console.log(`Progresso locale: ${key} = ${value}`);
          });
        } else {
          console.log("Nessun progresso locale trovato in localStorage per questa farm");
          setProgressiLocali(new Map());
        }
        
        // Carica anche l'elenco degli incarichi modificati
        const chiaveModificati = `progressiModificati_${farmSelezionata}`;
        const modificatiSalvati = localStorage.getItem(chiaveModificati);
        
        if (modificatiSalvati) {
          const modificatiArray = JSON.parse(modificatiSalvati) as string[];
          setProgressiModificati(new Set(modificatiArray));
          console.log("Incarichi modificati caricati da localStorage", modificatiArray.length, "elementi");
          
          // Stampa tutti gli incarichi modificati
          modificatiArray.forEach(id => {
            console.log(`Incarico modificato: ${id}`);
          });
          
          // Se ci sono incarichi modificati, imposta modificheNonSincronizzate a true
          if (modificatiArray.length > 0) {
            setModificheNonSincronizzate(true);
          }
        } else {
          console.log("Nessun incarico modificato trovato in localStorage per questa farm");
          setProgressiModificati(new Set());
        }
      } else {
        // Se farmSelezionata non è impostato, cerca progressi modificati per qualsiasi farm
        console.log("Nessuna farm selezionata, cerco progressi modificati per qualsiasi farm");
        
        // Cerca tutte le chiavi in localStorage che iniziano con "progressiModificati_"
        const modificatiTotali = new Set<string>();
        for (let i = 0; i < localStorage.length; i++) {
          const chiave = localStorage.key(i);
          if (chiave && chiave.startsWith("progressiModificati_")) {
            const modificatiSalvati = localStorage.getItem(chiave);
            if (modificatiSalvati) {
              const modificatiArray = JSON.parse(modificatiSalvati) as string[];
              modificatiArray.forEach(id => modificatiTotali.add(id));
            }
          }
        }
        
        if (modificatiTotali.size > 0) {
          setProgressiModificati(modificatiTotali);
          setModificheNonSincronizzate(true);
          console.log("Incarichi modificati trovati per varie farm:", modificatiTotali.size);
        } else {
          setModificheNonSincronizzate(false);
        }
      }
    } catch (error) {
      console.error("Errore nel caricamento dei progressi locali:", error);
    }
  }, [farmSelezionata]);
  
  // Funzione per caricare i progressi
  const caricaProgressi = useCallback(async (assegnazioniData: AssegnazioneEstesa[]) => {
    return caricaProgressiRef.current(assegnazioniData);
  }, []);

  // Funzione per caricare le assegnazioni
  const caricaAssegnazioni = useCallback(async () => {
    return caricaAssegnazioniRef.current();
  }, []);

  // Funzione per caricare i dati iniziali
  const caricaDati = useCallback(async () => {
    try {
      setLoading(true);
      setError("");
      
      console.log("caricaDati - Inizio caricamento dati");
      
      // Carica i dati di base
      await Promise.all([
        caricaIncarichi(),
        caricaIncarichiCitta(),
        caricaCesti(),
        caricaEdifici(),
        caricaDerby()
      ]);
      
      // Se è un admin o coordinatore, carica i giocatori
      if (currentUser?.ruolo === "admin" || currentUser?.ruolo === "coordinatore") {
        console.log("caricaDati - Utente admin o coordinatore, carico i giocatori");
        await caricaGiocatori();
      } else {
        // Altrimenti carica le farm dell'utente corrente
        console.log("caricaDati - Utente normale, carico le farm");
        await caricaFarms();
      }
      
      // Verifica se c'è una farm selezionata
      console.log("caricaDati - Farm selezionata:", farmSelezionata);
      console.log("caricaDati - Farms disponibili:", farms.length);
      
      // Se non c'è una farm selezionata ma ci sono farm disponibili, seleziona la prima
      if ((!farmSelezionata || farmSelezionata === "") && farms.length > 0) {
        console.log("caricaDati - Nessuna farm selezionata, seleziono la prima");
        setFarmSelezionata("0");
        
}